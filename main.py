import os
import asyncio
import logging
import re
import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
import yt_dlp
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv

load_dotenv()

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª .env –∑ —Ç–æ–∫–µ–Ω–æ–º.")

DOWNLOADS_DIR = os.getenv("DOWNLOADS_DIR", "downloads")
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def extract_twitter_images(url: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ñ–æ—Ç–æ –∑ —Ç–≤—ñ—Ç—É"""
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        images = []
        for img in soup.find_all('img', src=True):
            src = img['src']
            if 'media.twimg.com' in src and 'profile_images' not in src:
                clean_url = re.sub(r'\?.*$', '', src)
                if clean_url not in images:
                    images.append(clean_url)
        return images
    except Exception:
        return []

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç –∑ –≤—ñ–¥–µ–æ –∞–±–æ —Ñ–æ—Ç–æ –∑:\n"
        "‚Ä¢ TikTok ‚Ä¢ Instagram ‚Ä¢ YouTube ‚Ä¢ Twitter (X)\n"
        "‚Ä¢ Pinterest ‚Ä¢ Likee\n\n"
        "–Ø –∑–∞–≤–∞–Ω—Ç–∞–∂—É –≤—Å–µ –±–µ–∑ –≤–æ–¥—è–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤ —ñ –Ω–∞–¥—ñ—à–ª—é –∞–ª—å–±–æ–º–æ–º, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ!"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìò <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n\n"
        "1. –°–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç.\n"
        "2. –ù–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏.\n"
        "3. –û—Ç—Ä–∏–º–∞–π –≤—ñ–¥–µ–æ –∞–±–æ —Ñ–æ—Ç–æ!\n\n"
        "<i>üí° –î–ª—è Pinterest: —è–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ ‚Äî —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–∞ ‚Üí ¬´–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª).</i>",
        parse_mode="HTML"
    )

@dp.message(F.text)
async def handle_url(message: Message):
    url = message.text.strip()
    if not url.startswith(("http://", "https://")):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        return

    await message.answer("–ê–Ω–∞–ª—ñ–∑—É—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è... ‚è≥")

    # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    unique_id = str(uuid.uuid4())
    base_path = os.path.join(DOWNLOADS_DIR, unique_id)

    # --- –°–ø—Ä–æ–±–∞ 1: yt-dlp (–≤—ñ–¥–µ–æ + —Ñ–æ—Ç–æ) ---
    try:
        ydl_opts = {
            'format': 'best[height<=1080][filesize<50M]/best',
            'outtmpl': base_path + ".%(ext)s",
            'noplaylist': True,
            'merge_output_format': 'mp4',
            'quiet': True,
            'no_warnings': True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)

        # --- –í—ñ–¥–µ–æ ---
        for ext in ['mp4', 'webm', 'mkv', 'mov']:
            fpath = f"{base_path}.{ext}"
            if os.path.exists(fpath):
                await message.answer_video(FSInputFile(fpath))
                os.remove(fpath)
                return

        # --- –ê–ª—å–±–æ–º (Instagram, Pinterest) ---
        if 'entries' in info and info['entries']:
            album_urls = []
            for entry in info['entries']:
                if 'url' in entry:
                    album_urls.append(entry['url'])
                elif 'thumbnails' in entry and entry['thumbnails']:
                    album_urls.append(entry['thumbnails'][-1]['url'])
            if album_urls:
                media = [InputMediaPhoto(media=url) for url in album_urls[:10]]
                await message.answer_media_group(media)
                return

        # --- –û–¥–Ω–µ —Ñ–æ—Ç–æ (thumbnails) ---
        thumbnails = [t['url'] for t in info.get('thumbnails', []) if t.get('url')]
        if thumbnails:
            await message.answer_photo(thumbnails[-1])
            return

    except Exception as e:
        error_msg = str(e)
        # –¶—ñ –ø–æ–º–∏–ª–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç—å "–Ω–µ–º–∞—î –≤—ñ–¥–µ–æ, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ —Ñ–æ—Ç–æ"
        if not any(kw in error_msg for kw in [
            "No video formats found",
            "No video could be found in this tweet",
            "Video unavailable",
            "This video is not available",
            "Unsupported URL"
        ]):
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_msg[:300]}")
            return

    # --- –°–ø—Ä–æ–±–∞ 2: Twitter —Ñ–æ—Ç–æ ---
    if "twitter.com" in url or "x.com" in url:
        images = extract_twitter_images(url)
        if images:
            if len(images) == 1:
                await message.answer_photo(images[0])
            else:
                media = [InputMediaPhoto(media=url) for url in images[:10]]
                await message.answer_media_group(media)
            return

    # --- –°–ø—Ä–æ–±–∞ 3: –ø—Ä—è–º–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Pinterest .jpg) ---
    if url.endswith(('.jpg', '.jpeg', '.png', '.gif')):
        try:
            await message.answer_photo(url)
            return
        except Exception:
            pass

    await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–µ–æ –∞–±–æ —Ñ–æ—Ç–æ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())