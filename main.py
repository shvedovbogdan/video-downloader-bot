# main.py
import os
import asyncio
import tempfile
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from platforms import PLATFORM_HANDLERS
from dotenv import load_dotenv

import logging
logging.basicConfig(level=logging.INFO)

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))  # –≤ .env: OWNER_ID=123456789

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–∏ .env —Ñ–∞–π–ª.")

STATS_FILE = Path("active_users.json")

def load_users():
    if STATS_FILE.exists():
        try:
            return set(json.loads(STATS_FILE.read_text(encoding="utf-8")))
        except Exception:
            pass
    return set()

def save_users(users):
    try:
        STATS_FILE.write_text(json.dumps(list(users)), encoding="utf-8")
    except Exception:
        pass

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
active_users = load_users()

def get_handler(url: str):
    for domain, handler in PLATFORM_HANDLERS.items():
        if domain in url:
            return handler
    return None

# --- /start ---
@dp.message(Command("start"))
async def start(message: Message):
    active_users.add(message.from_user.id)
    save_users(active_users)
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ –∞–±–æ —Ñ–æ—Ç–æ –∑:\n"
        "‚Ä¢ YouTube ‚Ä¢ TikTok ‚Ä¢ Instagram ‚Ä¢ Twitter (X)\n"
        "‚Ä¢ Pinterest ‚Ä¢ Likee\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!\n"
        "‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /help"
    )

# --- /stats (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞) ---
@dp.message(Command("stats"))
async def stats(message: Message):
    if message.from_user.id != OWNER_ID:
        return
    user_count = len(active_users)
    await message.answer(f"üìä –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}")

# --- /help ---
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìò <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –ó–Ω–∞–π–¥–∏ –ø–æ—Å—Ç –∑ —Ä–µ—Ü–µ–ø—Ç–æ–º, –º–∞–ª—é–Ω–∫–æ–º —á–∏ –≤—ñ–¥–µ–æ.\n"
        "2. –°–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è (URL) –∑ Instagram, TikTok —Ç–æ—â–æ.\n"
        "3. –ù–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏.\n"
        "4. –û—Ç—Ä–∏–º–∞–π —Ñ–∞–π–ª –±–µ–∑ –≤–æ–¥—è–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤! ‚úÖ\n\n"
        "<b>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:</b>\n"
        "‚Ä¢ TikTok ‚Äî –≤—ñ–¥–µ–æ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø—É\n"
        "‚Ä¢ Instagram ‚Äî —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ (Reels, –ø–æ—Å—Ç–∏)\n"
        "‚Ä¢ YouTube ‚Äî –±—É–¥—å-—è–∫–∞ —è–∫—ñ—Å—Ç—å\n"
        "‚Ä¢ Twitter (X), Pinterest, Likee ‚Äî –≤—ñ–¥–µ–æ/—Ñ–æ—Ç–æ\n\n"
        "<i>‚ö†Ô∏è –í—ñ–¥–µ–æ –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ 50 –ú–ë (–æ–±–º–µ–∂–µ–Ω–Ω—è Telegram).</i>"
    )
    await message.answer(help_text, parse_mode="HTML")

# --- /lang ---
@dp.message(Command("lang"))
async def cmd_lang(message: Message):
    await message.answer(
        "üá∫üá¶ –ú–æ–≤–∞ –±–æ—Ç–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n"
        "üá¨üáß Bot language: Ukrainian\n"
        "üá∫üáø Botning tili: Ukrain"
    )

# --- –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å ---
@dp.message(F.text)
async def handle_url(message: Message):
    url = message.text.strip()
    logging.info(f"User {message.from_user.id} requested: {url}")

    if not url.startswith(("http://", "https://")):
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        return

    handler = get_handler(url)
    if not handler:
        await message.answer("‚ùå –¶—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
        return

    # –î–æ–¥–∞—î–º–æ –¢–Ü–õ–¨–ö–ò —Ç–∏—Ö, —Ö—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    active_users.add(message.from_user.id)
    save_users(active_users)

    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é... ‚è≥")

    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            result = await asyncio.to_thread(handler, url, temp_dir)

            # –û—Å–æ–±–ª–∏–≤–∏–π –≤–∏–ø–∞–¥–æ–∫: TikTok —Ñ–æ—Ç–æ
            if result.get("is_tiktok_photo"):
                await message.answer(
                    "üì∏ –¶–µ —Ñ–æ—Ç–æ-–ø–æ—Å—Ç –∑ TikTok.\n\n"
                    "–ù–∞ –∂–∞–ª—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n\n"
                    "‚úÖ –©–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ:\n"
                    "1. –í—ñ–¥–∫—Ä–∏–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ\n"
                    "2. –î–æ—á–µ–∫–∞–π—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ\n"
                    "3. –ö–ª–∞—Ü–Ω–∏ –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é ‚Üí ¬´–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª\n"
                    "4. –ù–∞–¥—ñ—à–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—é–¥–∏."
                )
                return

            for video in result["videos"]:
                await message.answer_video(FSInputFile(video))

            for audio in result["audios"]:
                await message.answer_audio(FSInputFile(audio))

            photos = result["photos"]
            if len(photos) == 1:
                await message.answer_photo(FSInputFile(photos[0]))
            elif len(photos) > 1:
                media = [InputMediaPhoto(media=FSInputFile(p)) for p in photos[:10]]
                await message.answer_media_group(media)

            if not any(result.get(k) for k in ["videos", "photos", "audios"]):
                raise Exception("No content found")

        except Exception as e:
            logging.error(f"Error processing {url}: {e}")

    # --- Fallback-—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó ---
    if "pinterest." in url:
        await message.answer(
            "üìå –¶–µ —Ñ–æ—Ç–æ –∑ Pinterest. –©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –π–æ–≥–æ:\n"
            "1. –í—ñ–¥–∫—Ä–∏–π –ø–æ—Å—Ç —É –±—Ä–∞—É–∑–µ—Ä—ñ\n"
            "2. –ö–ª–∞—Ü–Ω–∏ –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –Ω–∞ —Ñ–æ—Ç–æ ‚Üí ¬´–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª\n"
            "3. –ù–∞–¥—ñ—à–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—é–¥–∏."
        )
    elif "tiktok.com" in url and "/photo/" in url:
        await message.answer(
            "üì∏ –¶–µ —Ñ–æ—Ç–æ-–ø–æ—Å—Ç –∑ TikTok.\n\n"
            "–ù–∞ –∂–∞–ª—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.\n\n"
            "‚úÖ –©–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ:\n"
            "1. –í—ñ–¥–∫—Ä–∏–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ\n"
            "2. –î–æ—á–µ–∫–∞–π—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ\n"
            "3. –ö–ª–∞—Ü–Ω–∏ –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é ‚Üí ¬´–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª\n"
            "4. –ù–∞–¥—ñ—à–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—é–¥–∏."
        )
    else:
        await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    bot_info = await bot.get_me()
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    print(f"ü§ñ –Ü–º'—è: {bot_info.full_name}")
    print(f"üÜî Username: @{bot_info.username}")
    print(f"üîó ID: {bot_info.id}")
    print(f"üë• –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ: {len(active_users)}")
    print("-" * 50)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())